"""
This Snakefile produces ./data.h5. Pulls bigwig files from FinaleDB (http://finaledb.research.cchmc.org/) and pre-processes them into 1kb-resolution copy number and windowed protection score profiles. Features are 1Mb windows overlapping known cancer gene loci. 
"""

import os

# ichorCNA must be installed into ../src/utils/ext/ prior to running. 
if not os.path.isdir("../src/utils/ext/ichorCNA/"):
	os.system("git clone https://github.com/broadinstitute/ichorCNA.git ../src/utils/ext/")


CANCER_SAMPLES="EE87786 EE87787 EE87788 EE87789 EE87790 EE87791 EE87792 EE87793 EE87794 EE87795 EE87796 EE87797 EE87798 EE87799 EE87800 EE87801 EE87802 EE87803 EE87804 EE87805 EE87806 EE87807 EE87809 EE87810 EE87811 EE87812 EE87813 EE87814 EE87815 EE87816 EE87817 EE87818 EE87819 EE87820 EE87821 EE87822 EE87823 EE87824 EE87825 EE87826 EE87827 EE87828 EE87829 EE87830 EE87831 EE87832 EE87833 EE87834 EE87835 EE87836 EE87837 EE87838 EE87839 EE87840 EE87841 EE87842 EE87843 EE87844 EE87845 EE87846 EE87847 EE87848 EE87849 EE87850 EE87851 EE87852 EE87853 EE87854 EE87855 EE87856 EE87857 EE87858 EE87859 EE87860 EE87861 EE87862 EE87863 EE87864 EE87865 EE87866 EE87867 EE87868 EE87869 EE87870 EE87871 EE87872 EE87873 EE87874 EE87875 EE87876 EE87877 EE87878 EE87879 EE87880 EE87881 EE87882 EE87883 EE87884 EE87885 EE87886 EE87887 EE87888 EE87889 EE87890 EE87891 EE87892 EE87893 EE87894 EE87895 EE87896 EE87897 EE87898 EE87899 EE87900 EE87901 EE87902 EE87903 EE87904 EE87905 EE87906 EE87907 EE87908 EE87909 EE87910 EE87911 EE87912 EE87913 EE87914 EE87915 EE87916 EE87917 EE87918 EE87919 EE88183 EE88184 EE88185 EE88186 EE88187 EE88188 EE88189 EE88190 EE88191 EE88192 EE88193 EE88194 EE88195 EE88196 EE88197 EE88198 EE88199 EE88200 EE88201 EE88202 EE88203 EE88204 EE88205 EE88206 EE88207 EE88208 EE88209 EE88210 EE88211 EE88212 EE88213 EE88214 EE88215 EE88216 EE88217 EE88218 EE88219 EE88220 EE88221 EE88222 EE88223 EE88224 EE88225 EE88226 EE88227 EE88228 EE88229 EE88230 EE88231 EE88232 EE88233 EE88234 EE88235 EE88236 EE88237 EE88238 EE88239 EE88240 EE88241 EE88242 EE88243 EE88244 EE88245 EE88246 EE88247 EE88248 EE88249 EE88250 EE88251 EE88252 EE88253 EE88254 EE88255 EE88256 EE88257 EE88258 EE88259 EE88260 EE88261 EE88262 EE88263 EE88264 EE88265 EE88266 EE88267 EE88268 EE88269 EE88270 EE88271 EE88272 EE88273 EE88274 EE88275 EE88276 EE88277 EE88278 EE88279 EE88280 EE88281 EE88282 EE88283 EE88284 EE88285 EE88286 EE88287 EE88288 EE88289 EE88290 EE88291 EE88292 EE88293 EE88294 EE88295 EE88296 EE88297 EE88298 EE88299 EE88300 EE88301 EE88302 EE88303 EE88304 EE88305 EE88306 EE88307 EE88308 EE88309 EE88310 EE88311 EE88312 EE88313 EE88314 EE88315 EE88316 EE88317 EE88318 EE88319 EE88320 EE88321 EE88322 EE88323 EE88324 EE88325".split(" ")

HEALTHY_SAMPLES="EE87920 EE87921 EE87922 EE87923 EE87924 EE87925 EE87926 EE87927 EE87928 EE87929 EE87931 EE87932 EE87933 EE87934 EE87935 EE87936 EE87937 EE87938 EE87939 EE87940 EE87941 EE87942 EE87943 EE87944 EE87945 EE87946 EE87947 EE87948 EE87949 EE87950 EE87951 EE87952 EE87953 EE87954 EE87955 EE87956 EE87957 EE87958 EE87959 EE87960 EE87961 EE87962 EE87963 EE87964 EE87965 EE87966 EE87967 EE87968 EE87969 EE87970 EE87971 EE87972 EE87973 EE87974 EE87975 EE87976 EE87977 EE87978 EE87979 EE87980 EE87981 EE87982 EE87983 EE87984 EE87985 EE87986 EE87987 EE87988 EE87989 EE87990 EE87991 EE87992 EE87993 EE87994 EE87995 EE87996 EE87997 EE87998 EE87999 EE88000 EE88001 EE88002 EE88003 EE88004 EE88005 EE88006 EE88007 EE88008 EE88009 EE88010 EE88011 EE88012 EE88013 EE88014 EE88015 EE88016 EE88017 EE88018 EE88019 EE88020 EE88021 EE88022 EE88023 EE88024 EE88025 EE88026 EE88027 EE88028 EE88029 EE88030 EE88031 EE88032 EE88033 EE88034 EE88035 EE88036 EE88037 EE88038 EE88039 EE88040 EE88041 EE88042 EE88043 EE88044 EE88045 EE88046 EE88047 EE88048 EE88049 EE88050 EE88051 EE88052 EE88053 EE88054 EE88055 EE88056 EE88057 EE88058 EE88059 EE88060 EE88061 EE88062 EE88063 EE88064 EE88065 EE88066 EE88067 EE88068 EE88069 EE88070 EE88071 EE88072 EE88073 EE88074 EE88075 EE88076 EE88077 EE88078 EE88079 EE88080 EE88081 EE88082 EE88083 EE88084 EE88085 EE88086 EE88087 EE88088 EE88089 EE88090 EE88091 EE88092 EE88093 EE88094 EE88095 EE88096 EE88097 EE88098 EE88099 EE88100 EE88101 EE88102 EE88103 EE88104 EE88105 EE88106 EE88107 EE88108 EE88109 EE88110 EE88111 EE88112 EE88113 EE88114 EE88115 EE88116 EE88117 EE88118 EE88119 EE88120 EE88121 EE88122 EE88123 EE88124 EE88125 EE88126 EE88127 EE88128 EE88129 EE88130 EE88131 EE88132 EE88133 EE88134 EE88135 EE88136 EE88137 EE88138 EE88139 EE88140 EE88141 EE88142 EE88143 EE88144 EE88145 EE88146 EE88147 EE88148 EE88149 EE88150 EE88151 EE88152 EE88153 EE88154 EE88155 EE88156 EE88157 EE88158 EE88159 EE88160 EE88161 EE88162 EE88163 EE88164 EE88165 EE88166 EE88167 EE88168 EE88169 EE88170 EE88171 EE88172 EE88173 EE88174 EE88175 EE88176 EE88177 EE88178 EE88179 EE88180 EE88181 EE88182".split(" ")


rule all:
    input:
    	"data.h5"

rule get_files:
	output:
		"{group}/{datatype}/bw/{sample}.hg38.{datatype}.mapq30.bw"
	shell:
		"""
		URL=https://s3.us-east-2.amazonaws.com/cfdnadb.epifluidlab.cchmc.org/entries/{wildcards.sample}/hg38/{wildcards.sample}.hg38.{wildcards.datatype}.mapq30.bw
		
		if wget --spider $URL 2>/dev/null; then
			wget -O {output} $URL
		else
		  echo {wildcards.sample}
		fi
		"""

rule bigWig2bedGraph:
	input: 
		"{group}/{datatype}/bw/{sample}.hg38.{datatype}.mapq30.bw"
	output:
		"{group}/{datatype}/bg/{sample}.hg38.{datatype}.mapq30.bg"
	shell:
		"""
		../src/utils/ext/bigWigToBedGraph {input} {output}
		"""

rule bin_wps:
	input:
		genome="genome.1kb.sorted.bed",
		bg="{group}/wps/bg/{sample}.hg38.{datatype}.mapq30.bg"
	output:
		"{group}/wps/bg/{sample}.hg38.{datatype}.mapq30.1kb.binned.bg"

	shell:
		"""
		bedtools map -null -99 -a {input.genome} -b {input.bg} -c 4 -o mean > {output}
		"""

rule bin_coverage:
	input:
		regions_interest="cancer_overlap_1kb_regions_filt.bed",
		bg="{group}/coverage/bg/{sample}.hg38.{datatype}.mapq30.bg"
	output:
		"{group}/coverage/bg/{sample}.hg38.{datatype}.mapq30.1Mb.binned.bg"

	shell:
		"""
		bedtools map -null 0 -a {input.regions_interest} -b {input.bg} -c 4 -o sum > {output}
		"""

rule begGraph2wig:
	input:
		"{group}/coverage/bg/{sample}.hg38.coverage.mapq30.1Mb.binned.bg"
	output:
		"{group}/coverage/wig/{sample}.hg38.coverage.mapq30.1Mb.binned.wig"
	shell:
		"""
		../src/utils/ext/bedGraphToWig.sh < {input} |
		grep -E "^[0-9]|start=1 " > {output} 
		"""


rule run_ichor:
	input: 
		wig="{group}/coverage/wig/{sample}.hg38.coverage.mapq30.1Mb.binned.wig",
		gcWig="../src/utils/ext/ichorCNA/inst/extdata/gc_hg38_1000kb.wig",
		map="../src/utils/ext/ichorCNA/inst/extdata/map_hg38_1000kb.wig",
		centromere="../src/utils/ext/ichorCNA/inst/extdata/GRCh38.GCA_000001405.2_centromere_acen.txt"
	output:
		"{group}/coverage/{sample}/{sample}.cna.seg"

	shell:
		"""
		mkdir -p {wildcards.group}/coverage/{wildcards.sample}

	    # get copy number profiles
		Rscript ../src/utils/ext/ichorCNA/scripts/runIchorCNA.R --id {wildcards.sample} --WIG {input.wig} --gcWig {input.gcWig} --mapWig {input.map} --genomeBuild hg38 --centromere {input.centromere} --normalPanel healthy/PoN_median.rds --outDir {wildcards.group}/coverage/{wildcards.sample}
		"""

rule compile_output:
	input:
		cna="{group}/coverage/{sample}/{sample}.cna.seg",
		wps="{group}/wps/bg/{sample}.hg38.wps.mapq30.1kb.binned.bg",
		bins1kb="genome.1kb.sorted.bed"
	output:
		"{group}/processed/{sample}.txt"
	shell:
		"""
		echo "filtering for cancer genes, prepping CNA..."
		# filter for 1Mb bins overlapping cancer genes, bin cn profiles into 1kb windows
		tail -n +2 {input.cna} | sed -e 's/^/chr/' | cut -f 1,2,3,8 |  \
		bedtools intersect -wa -a stdin -b cancer_genes.sorted.bed -sorted -g hg38.chrom.sizes | uniq |  \
		bedtools map -a {input.bins1kb} -b stdin -c 4 -o mean -g hg38.chrom.sizes | \
		grep -v "\.$" > {output}.cna.tmp


		echo "prepping WPS..."
		# filter for wps 1kb bins that we have cn profiles for
		sort -V -k1,1 -k2,2 {input.wps} | bedtools intersect -wa -a stdin -b {output}.cna.tmp | cut -f 4 > {output}.wps.tmp
		

		echo "pasting CNA & WPS..."
		# paste cna and wps vectors together
		cut -f 4 {output}.cna.tmp | paste - {output}.wps.tmp > {output}
		rm {output}.*tmp

		"""		
	
rule txt_to_h5:
	input:
	    cancer_samples=expand("cancer/processed/{sample}.txt", sample=CANCER_SAMPLES),
    	healthy_samples=expand("healthy/processed/{sample}.txt", sample=HEALTHY_SAMPLES)
	output:
		"data.h5"
	shell:
		"""
		cat {input}.cancer_samples > cancer/processed/cancer_samples.txt
		cat {input}.healthy_samples > healthy/processed/healthy_samples.txt
		python ../src/utils/ext/txt_to_h5.py
		"""

